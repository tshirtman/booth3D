#:import Image kivy.uix.image.Image
#:import Video kivy.uix.video.Video
#:import HoloStandLayout holo_stand_layout.HoloStandLayout
#:import glob glob.glob
#:import FXAAEffect kivy.uix.effectwidget.FXAAEffect
#:import HorizontalBlurEffect kivy.uix.effectwidget.HorizontalBlurEffect
#:import VerticalBlurEffect kivy.uix.effectwidget.VerticalBlurEffect
#:import C kivy.utils.get_color_from_hex
#:import sin math.sin
#:import cos math.cos
#:import pi math.pi

HoloStandLayout:
    ParticleSystem:
        id: particle
        pos_hint: {'pos': (.5, .05)}
        config: 'data/%splosion.pex' % ('ex' if app.display_container else 'im')
        on_config:
            self.stop()
            self._parse_config(self.config)
            self.start()

    Container:
        id: container
        pos_x: .5
        pos_y: .3
        pos_hint: {'center': (self.pos_x, self.pos_y)}

<Container@RelativeLayout>:
    title_y_decal: -1
    carousel_y_decal: -2

    #EffectWidget:
    #    effects: [HorizontalBlurEffect(), VerticalBlurEffect()]
        #background_color: 0, 0, 0, 0
    TransparentLayout:
        id: pandalayout
        opacity: pandaview.opacity
        size_hint_x: None
        width: 800
        pos_hint: {'center_x': .5}

        Ingredients3DView:
            id: pandaview
            models:
                (
                'data/rose.egg',
                'data/honey.egg',
                'data/peach.egg',
                )
            angles: [app.angle for model in self.models]
            cam_radius: 7
            cam_pos: -self.cam_radius * sin(app.angle * 2*pi), self.cam_radius * cos(app.angle * 2*pi), 2.5
            cam_lookat: 0, 0, 1.5
            radius: 1.5
            opacity: 0
            obj_1_z: -5
            obj_2_z: -5
            obj_3_z: -5
            # FIXME: See the hack in panda_wrapper to make everything a list
            # FIXME: We need some abstraction of Panda's models!
            # FIXME: Probably using base as global in panda_wrapper and exposing functions such as setPos or setHpr as Kivy properties
            # FIXME: No metaprog required :-)
            obj_pos:
                (
                (sin(-2./3*pi) * self.radius, cos(-2./3*pi) * self.radius, self.obj_1_z),
                (                          0,                 self.radius, self.obj_2_z),
                ( sin(2./3*pi) * self.radius,  cos(2./3*pi) * self.radius, self.obj_3_z),
                )
            start_animation: app.display_container

    #View:
    #    canvas.before:
    #        Color:
    #            rgba: 1, 1, 1, 1

    #    scene: 'data/potdecreme.obj'
    #    display_all: True
    #    #mode: 'lines'
    #    #cam_rotation: (app.data[-1][-3] if app.data else 0), -app.angle * 360, (app.data[-1][-2] * 360 if app.data else 0)
    #    cam_rotation: 10, -app.angle * 360, 0
    #    cam_translation: 0, -3, -9
    #    obj_scale: .6
    #    light_sources:
    #        {x: ([float(y) * 15 - 7.5 for y in bin(x)[2:].rjust(3, '0')] + [1.0]) for x in range(8)}

    Carousel:
        id: carousel
        index:
            (
            0 if 1/6. < app.angle % 1 < 1/2. else
            2 if 1/2. < app.angle % 1 < 5/6. else
            1
            )

        Widget:
        Widget:
        Widget:

    ProgressiveLabel:
        id: title
        line_interval: 8
        opacity: root.title_y_decal + 1
        canvas.before:
            PushMatrix:
            Scale:
                x: -1
                origin: self.x, 0
            Color:
                rgba: 1, 1, 1, 1

        canvas.after:
            Color:
                rgba: C('C69C6D')[:3] + [.5]

            Line:
                points: self.x - 250, self.top - 5 - self.line_interval * 2, self.x - 10, self.top - 5 - self.line_interval * 2
                width: 2.3
                cap: 'none'

            Line:
                points: self.x - 250, self.top - 5 - self.line_interval, self.x - 10, self.top - 5 - self.line_interval
                width: 1.7
                cap: 'none'

            Line:
                points: self.x - 249, self.top - 5, self.x - 9, self.top - 5
                width: 1
                cap: 'none'
            PopMatrix:

        target_text: app.titles_list[carousel.index] if carousel.index is not None and carousel.index <= len(app.titles_list) else ' '
        size_hint: None, None
        size: self.texture_size
        pos_hint: {'x': .5 + root.title_y_decal, 'y': .6}
        font_name: 'data/MyriadPro-Regular.otf'
        font_size: '40sp'
        interval: .05
        color: C('C69C6D')
